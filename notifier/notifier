#!/bin/bash

LOGFILE='./logfile'

BASE_URL='http://localhost:3000'
MY_ADDRESS='BPXDv9a5jYXg13Bn2irg4zvizorfwjr9sf'
# Error handling
# Adjust prices for OPS
COST_FOLLOW=0
COST_LIKE=0
COST_RETWEET=0
COST_MENTION=0

# Indicies for OPS
FOLLOW=1
LIKE=2
RETWEET=3
MENTION=4

# Check if price is enough for operation
# checkprice amount operation
checkprice() {
	local amount=$1
	local OP=$2
	local res=0

	case $OP in
			$FOLLOW) [[ $amount -ge $COST_FOLLOW ]] && res=1 ;;
			$LIKE) [[ $amount -ge $COST_LIKE ]] && res=1 ;;
			$RETWEET) [[ $amount -ge $COST_RETWEET ]] && res=1 ;;	
			$MENTION) [[ $amount -ge $COST_MENTION ]] && res=1 ;;
	esac

	echo $res 
}

# Get endpoint for API.  Empty string if not enough funds
# getendpoint msg amount
getendpoint() {
	local msg=$1
	local amount=$2

	local OP=$(echo "$msg" | cut -f 1 -d':')
	local arg=$(echo "$msg" | cut -f 2 -d':')

	local endpoint=""

	case $OP in
			$FOLLOW) [[ $(checkprice $amount $OP) == 1 ]] && endpoint="/follow/$arg" ;;
			$LIKE) [[ $(checkprice $amount $OP) == 1 ]] && endpoint="/like/$arg" ;;
			$RETWEET) [[ $(checkprice $amount $OP) == 1 ]] && endpoint="/retweet/$arg" ;;
			$MENTION) if [[ $(checkprice $amount $OP) == 1 ]]; then
					local user=$(echo "$msg" | cut -d':' -f 2)
					local tweet=$(echo "$msg" | cut -d':' -f 3 | sed 's/ /%20/g')
					endpoint="/mention/$user/$tweet"
					fi
					;;
	esac
	
	echo $endpoint
}

echo '#######################################################################' | tee -a $LOGFILE
date | tee -a $LOGFILE

# Transaction id
txid=$1

echo "Got transaction $txid" | tee -a $LOGFILE

if [[ "$(grep $txid $LOGFILE)" != "" ]]; then
		echo "Duplicate transaction" | tee -a $LOGFILE
		echo "Exiting..." | tee -a $LOGFILE
fi

# Raw hex encoded transaction
rawtx=$(smileycoin-cli getrawtransaction "$txid")

# Get received amount dropping decimal point
amt=$(smileycoin-cli decoderawtransaction $rawtx | awk '/value/ {val=$3} pnxt == 1 {print $0, val; pnxt=0} /addresses/ {pnxt=1}' | grep $MY_ADDRESS | sed -e 's/^\s\+//g' -e 's/[,"]//g' -e 's/\..*$//g' | awk '{print $2}')

if [[ "$amt" == "" ]]; then
		echo "Amount is not valid" | tee -a $LOGFILE
		echo "Exiting..." | tee -a $LOGFILE
		exit 1
fi
echo "Received amount: $amt" | tee -a $LOGFILE

# Raw hex encoded message, OP_RETURN.
rawmessage=$(smileycoin-cli decoderawtransaction "$rawtx" | grep OP_RETURN | awk '{print $4}' | sed 's/[",]//g')

if [[ "$rawmessage" == "" ]]; then
		echo "No message in transaction" | tee -a $LOGFILE
		echo "Exiting..." | tee -a $LOGFILE
		exit 1
fi

echo "Received raw message: $rawmessage" | tee -a $LOGFILE

message=$(./decode "$rawmessage")

echo "Decoded message: $message" | tee -a $LOGFILE

refundTransaction() {
    local senderTxid=$(smileycoin-cli decoderawtrasaction $rawtx | sed -e '1,/vin/d' -e '/"vout"*:*\[/' | grep txid | awk '{print $3}' | sed 's/[",]//g')
    local senderVout=$(smileycoin-cli decoderawtrasaction $rawtx | sed -e '1,/vin/d' -e '/"vout"*:*\[/' | grep vout | awk '{print $3}' | sed 's/[",]//g')

    local senderTx=$(smileycoin-cli getrawtransaction $senderTxid)
    local recipient=$(smileycoin-cli decoderawtransaction $senderTx | sed -n -e '/\s*"n"\s*:\s*'"$senderVout/,/]/p" | sed -e '$d'| sed '/]/,$d'|tail -1| sed -e 's/[",:]//g' -e 's/^\s*//g')

    smileycoin-cli sendtoaddress $recipient $(($amt - 1))
    echo "refunding $amt to $recipient" | tee -a $LOGFILE
}

#########################
#						#
#	Message handling	#
#						#
#########################

# Messages should be of the form OP:arg
#
# OP codes:	
#			1: Follow, expects username as second argument.
#			2: Like, expects tweet id of requested tweet.
#			3: Retweet, expects tweet id of requested tweet.

# Check for syntax error in message
pattern="^[1-4]:.*$"

if [[ "$(echo $message | grep -E "$pattern")" == "" ]]; then
		# Syntax error in message
		echo "Invalid message" | tee -a $LOGFILE
		echo "Exiting..." | tee -a $LOGFILE
		exit 1
fi

endpoint=$(getendpoint "$message" "$amt")


if [[ "$endpoint" == "" ]]; then
		echo "Not enough funds for operation" | tee -a $LOGFILE
		echo "Exiting..." | tee -a $LOGFILE
		exit 1
fi

echo "Sending HTTP request to $BASE_URL$endpoint" | tee -a $LOGFILE
# Add error handling if curl error
res=$(curl "$BASE_URL$endpoint")
curlstatus="$?"

if [[ "$curlstatus" != 0 ]]; then
		echo "curl responded with a non zero exit status: $curlstatus" | tee -a $LOGFILE
    refundTransaction
		echo "Exiting..." | tee -a $LOGFILE
		exit 1
fi

echo "Received response from server: $res" | tee -a $LOGFILE

if [[ "$(echo $res | grep error)" != "" ]]; then
		# Error from API
		echo "Received error from API: $res" | tee -a $LOGFILE
		echo "Exiting..." | tee -a $LOGFILE
		exit 1
fi

